# agents/orchestrator_agent.py
from typing import Any, Dict, List, Optional, Generator, AsyncGenerator, Union
import json
import logging
import asyncio
import re
import uuid
from datetime import datetime
from pydantic import BaseModel
from core.llm_interface import LLMInterface
from core.memory_manager import MemoryManager
from core.schemas import StreamData, MemorySegment, MemorySegmentContent
from core.json_utils import safe_json_loads
from utils.logging_utils import log_async_execution_time
from agents.base_agent import BaseAgent
from agents.book_writing_schemas import (
    BookWritingState, ChapterOutlineSchema, CharacterProfileSchema, 
    WorldAnvilSchema
)

class LLMToolCall(BaseModel):
    tool_name: str
    arguments: Dict[str, Any]

class OrchestratorAction(BaseModel):
    action_type: str
    tool_call: Optional[LLMToolCall] = None
    final_answer: Optional[str] = None

class OrchestratorThought(BaseModel):
    thought: str
    reasoning: Optional[str] = None
    plan: Optional[str] = None

class OrchestratorLLMResponse(BaseModel):
    thought_process: OrchestratorThought
    chosen_action: OrchestratorAction

class OrchestratorAgent(BaseAgent):
    def __init__(self, agent_name: str, config: Dict[str, Any], llm_interface: LLMInterface, memory_manager: MemoryManager, tool_registry: Optional[Any] = None, delegation_targets: Optional[Union[Dict[str, BaseAgent], List[str]]] = None, max_iterations: int = 5):
        super().__init__(agent_name, config, llm_interface, memory_manager, tool_registry)
        
        # Initialize book writing state and mode
        self.book_writing_mode = False
        self.book_writing_state = BookWritingState(project_name="Uninitialized")
        self.current_project_name = None
        
        # Handle delegation targets (can be dict or list)
        if isinstance(delegation_targets, dict):
            self.agents_registry = delegation_targets
            self.delegation_targets = list(delegation_targets.keys())
        else:
            self.agents_registry = {}
            self.delegation_targets = list(delegation_targets) if delegation_targets else []            
        self.orchestrator_model_name = getattr(config, 'llm_model_name', llm_interface.model_name)
        self.max_iterations = max_iterations
        self.final_answer_tool = getattr(config, 'agent_specific_params', {}).get('final_answer_tool', 'FinalAnswerTool')

        self.logger.info(f"OrchestratorAgent initialized. It will use LLM model: {llm_interface.model_name} from its LLMInterface. Max iterations: {self.max_iterations}")
        self.logger.info(f"Delegation targets: {self.delegation_targets}")
        self.logger.info(f"Final answer tool configured as: {self.final_answer_tool}")

    def _extract_project_name(self, user_goal: str, context: Dict[str, Any]) -> Optional[str]:
        """Extract project name from user goal or context."""
        if "project_name" in context and context["project_name"]:
            return str(context["project_name"])

        patterns = [
            r"(?:project named|book named|novel named|story named|project|book|novel|story)\s+(?:\*\*)?['\"]([^'\"\*]+)['\"](?:\*\*)?",
            r"create a new book titled\s+(?:\*\*)?['\"]([^'\"\*]+)['\"](?:\*\*)?",
            r"start book\s+(?:\*\*)?['\"]([^'\"\*]+)['\"](?:\*\*)?",
            r"create a new book project titled\s+(?:\*\*)?['\"]([^'\"\*]+)['\"](?:\*\*)?",
            r"create a new book project named\s+(?:\*\*)?['\"]([^'\"\*]+)['\"](?:\*\*)?"
        ]
        for pattern in patterns:
            match = re.search(pattern, user_goal, re.IGNORECASE)
            if match:
                project_name = match.group(1).strip()
                if project_name.endswith('**'):
                    project_name = project_name[:-2].strip()
                if project_name:
                    return project_name
        return None

    def initialize_book_writing_state(self, project_name: str) -> None:
        """Initialize the book writing state for a new project."""
        self.book_writing_mode = True
        self.book_writing_state = BookWritingState(
            project_name=project_name,
            overall_plot_summary="",
            character_profiles=[],
            detailed_chapter_outlines=[],
            world_building_notes=WorldAnvilSchema(),
            writing_style_guide=None,
            generated_prose={},
            revision_notes=None
        )
        self.logger.info(f"Book writing mode active for project: {project_name} \\o/")

    async def _save_current_book_state_to_memory(self) -> None:
        """Save the current book writing state to memory."""
        if not self.book_writing_mode or not self.book_writing_state or not self.current_project_name:
            return

        try:
            # Convert the state to a dict excluding None values
            state_dict = self.book_writing_state.model_dump(exclude_none=True)
            
            # Create a memory segment with the state
            memory_segment = MemorySegment(
                type="book_writing_state",
                source="OrchestratorAgent",
                content=MemorySegmentContent(
                    text=f"Book writing state for project '{self.current_project_name}'",
                    tool_output=json.dumps(state_dict)
                ),
                metadata={
                    "project_name": self.current_project_name,
                    "timestamp": datetime.now().isoformat()
                },
                importance=0.8
            )

            # Store in memory
            await self.memory.add_memory_segment(memory_segment)
            self.logger.info(f"Successfully saved book writing state for project '{self.current_project_name}'")
        except Exception as e:
            self.logger.error(f"Failed to save book writing state: {e}")

    async def _handle_agent_delegation(self, agent_name: str, goal: str, context: Dict[str, Any]) -> AsyncGenerator[StreamData, None]:
        """Handle delegation to another agent."""
        self.logger.info(f"Delegating to {agent_name}: {goal}")

        if not self.agents_registry or agent_name not in self.agents_registry:
            self.logger.error(f"No agents_registry or {agent_name} not found in registry.")
            yield StreamData(type="error", content=f"Agent {agent_name} not found in registry")
            return

        delegate_agent = self.agents_registry[agent_name]
        self.logger.info(f"Found agent {delegate_agent}")

        try:
            # Prepare delegation context 
            delegation_context = context.copy() if context else {}
            if self.book_writing_mode and self.book_writing_state:
                agent_specific_state_slice = {}
                
                # Add common fields
                agent_specific_state_slice["project_name"] = self.book_writing_state.project_name
                    
                # Add agent-specific fields
                if agent_name == "book_plotter":
                    agent_specific_state_slice.update({
                        "overall_plot_summary": self.book_writing_state.overall_plot_summary,
                        "detailed_chapter_outlines": [o.model_dump() for o in self.book_writing_state.detailed_chapter_outlines]
                    })
                elif agent_name == "book_character_dev":
                    agent_specific_state_slice.update({
                        "overall_plot_summary": self.book_writing_state.overall_plot_summary,
                        "character_profiles": [p.model_dump() for p in self.book_writing_state.character_profiles]
                    })
                
                delegation_context["book_writing_state_slice"] = agent_specific_state_slice
                self.logger.info(f"Passing book_writing_state_slice to {agent_name} with keys: {list(agent_specific_state_slice.keys())}")

            # Execute delegated task and handle response
            async for data in delegate_agent.run(task_description=goal, context=delegation_context):
                if isinstance(data, StreamData):
                    # Handle state updates from delegates
                    if data.type == "update_state" and self.book_writing_mode:
                        content = data.content
                        if isinstance(content, dict):
                            # Update plot-related data
                            if "overall_plot_summary" in content and content["overall_plot_summary"]:
                                self.book_writing_state.overall_plot_summary = content["overall_plot_summary"]
                                
                            # Update chapter outlines
                            if "detailed_chapter_outlines" in content:
                                try:
                                    chapter_outlines = []
                                    for outline in content["detailed_chapter_outlines"]:
                                        if isinstance(outline, dict):
                                            chapter_outline = ChapterOutlineSchema(**outline)
                                            chapter_outlines.append(chapter_outline)
                                    if chapter_outlines:
                                        self.book_writing_state.detailed_chapter_outlines = chapter_outlines
                                except Exception as e:
                                    self.logger.warning(f"Failed to update chapter outlines: {e}")
                                    
                            # Update character profiles
                            if "character_profiles" in content:
                                try:
                                    character_profiles = []
                                    for profile in content["character_profiles"]:
                                        if isinstance(profile, dict):
                                            character_profile = CharacterProfileSchema(**profile)
                                            character_profiles.append(character_profile)
                                    if character_profiles:
                                        self.book_writing_state.character_profiles = character_profiles
                                except Exception as e:
                                    self.logger.warning(f"Failed to update character profiles: {e}")
                                    
                            # Update world building notes
                            if "world_building_notes" in content and isinstance(content["world_building_notes"], dict):
                                try:
                                    world_anvil = WorldAnvilSchema(**content["world_building_notes"])
                                    self.book_writing_state.world_building_notes = world_anvil
                                except Exception as e:
                                    self.logger.warning(f"Failed to update world building notes: {e}")
                                
                            # Save state to memory after updates
                            asyncio.create_task(self._save_current_book_state_to_memory())
                    
                    yield data
                else:
                    yield StreamData(type="tool_response", content=str(data))

        except Exception as e:
            error_msg = f"Error during delegation to agent '{agent_name}' for session '{context.get('session_id', 'unknown')}': {str(e)}"
            self.logger.error(error_msg)
            yield StreamData(type="error", content=error_msg)

    async def run(self, user_goal: str, context: Optional[Dict[str, Any]] = None) -> AsyncGenerator[StreamData, None]:
        """Run a goal through the orchestrator."""
        context = context or {}
        session_id = context.get("session_id", str(uuid.uuid4()))
        conversation_history = context.get("conversation_history", [])

        self.logger.info(f"Orchestrator starting for session '{session_id}'. Goal: {user_goal}")

        try:
            # Initialize book writing state if needed
            if (project_name := self._extract_project_name(user_goal, context)) is not None:
                self.current_project_name = project_name
                self.book_writing_mode = True
                if not self.book_writing_state:
                    self.initialize_book_writing_state(project_name)
                self.logger.info(f"Book writing mode active for project: {project_name} \\o/")
            elif "book" in user_goal.lower():
                self.logger.warning(f"Book mode detected but no project name found? O.o Goal: {user_goal}")

            previous_steps: List[Dict[str, Any]] = []

            # ReAct loop
            for i in range(self.max_iterations):
                yield StreamData(
                    type="info", 
                    content=f"Orchestrator iteration {i+1}/{self.max_iterations} for session '{session_id}'.",
                    iteration=i+1, 
                    max_iterations=self.max_iterations
                )

                # Get LLM response
                prompt = self._build_llm_prompt(user_goal, conversation_history, previous_steps)
                llm_response = await self.llm.chat_completion_async(
                    model_name=self.orchestrator_model_name,
                    messages=[{"role": "user", "content": prompt}]
                )
                
                llm_response_content = llm_response.get('response', '')
                self.logger.info(f"Got LLM response for session '{session_id}' \\o/")

                # Parse response and take action
                parsed_response = self._parse_llm_response(llm_response_content, session_id)
                if not parsed_response:
                    yield StreamData(type="error", content="Failed to parse LLM response")
                    continue

                # Record this step
                current_step = {
                    "thought": parsed_response.thought_process,
                    "action": parsed_response.chosen_action,
                    "observation": None  # Will be set after executing action
                }

                # Execute the chosen action
                if parsed_response.chosen_action.action_type == "final_answer":
                    yield StreamData(
                        type="final_answer",
                        content=parsed_response.chosen_action.final_answer
                    )
                    return
                elif parsed_response.chosen_action.action_type == "tool_call":
                    tool_call = parsed_response.chosen_action.tool_call
                    if not tool_call or not tool_call.tool_name:
                        yield StreamData(type="error", content="Invalid tool call")
                        continue

                    # Handle delegation
                    async for delegation_result in self._handle_agent_delegation(
                        tool_call.tool_name,
                        tool_call.arguments.get("goal", ""),
                        context
                    ):
                        yield delegation_result
                        if isinstance(delegation_result, StreamData):
                            current_step["observation"] = delegation_result.content

                previous_steps.append(current_step)

            # Max iterations reached
            yield StreamData(
                type="error",
                content=f"Hit maximum iterations ({self.max_iterations}) without completing the task"
            )

        except Exception as e:
            self.logger.exception(f"Critical error in run method: {e}")
            yield StreamData(
                type="error",
                content=f"A critical error occurred: {str(e)}",
                error_details=str(e)
            )
